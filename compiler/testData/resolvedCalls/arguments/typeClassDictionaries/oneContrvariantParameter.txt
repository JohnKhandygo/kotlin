package test

@Target(AnnotationTarget.CLASS)
annotation class TypeClass

open class A1
open class A2: A1()
open class A3: A2()
open class A4: A3()
open class A5: A4()

@TypeClass
interface TC<T> {
    fun doStuff(): T
}

object A1Member : TC<A1> {
    override fun doStuff(): A1 = A1()
}

object A2Member : TC<A2> {
    override fun doStuff(): A2 = A2()
}

fun <T> doStuff(dictionary: TC<in T>): T = dictionary.doStuff()

fun main() {
    <caret>doStuff<A1>()
    <caret>doStuff<A2>()
    <caret>doStuff<A4>()
}


Resolved call:

Candidate descriptor: fun <T> doStuff(dictionary: TC<in T>): T defined in test
Resulting descriptor: fun <T> doStuff(dictionary: TC<in A1>): A1 defined in test

Explicit receiver kind = NO_EXPLICIT_RECEIVER
Dispatch receiver = NO_RECEIVER
Extension receiver = NO_RECEIVER

Resolved value arguments mapping:

SUCCESS  dictionary : TC<in A1> = test.A1Member


Resolved call:

Candidate descriptor: fun <T> doStuff(dictionary: TC<in T>): T defined in test
Resulting descriptor: fun <T> doStuff(dictionary: TC<in A2>): A2 defined in test

Explicit receiver kind = NO_EXPLICIT_RECEIVER
Dispatch receiver = NO_RECEIVER
Extension receiver = NO_RECEIVER

Resolved value arguments mapping:

SUCCESS  dictionary : TC<in A2> = test.A2Member


Resolved call:

Candidate descriptor: fun <T> doStuff(dictionary: TC<in T>): T defined in test
Resulting descriptor: fun <T> doStuff(dictionary: TC<in A4>): A4 defined in test

Explicit receiver kind = NO_EXPLICIT_RECEIVER
Dispatch receiver = NO_RECEIVER
Extension receiver = NO_RECEIVER

Resolved value arguments mapping:

SUCCESS  dictionary : TC<in A4> = test.A2Member