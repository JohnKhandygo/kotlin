package test

@TypeClass
interface TC<T> {
    fun doStuff(t: T)

    companion object {
        fun <T> foo(t: T) {}
    }
}

object TCMember : TC<Double> {
    override fun doStuff(t: Double) {}
}

fun <T, C : TC<T>> doStuff(t: T) = TC.<caret>doStuff(t)

fun main() {
    val d: Double = 0.0
    <caret>doStuff(d)
}


Resolved call:

Candidate descriptor: fun <T> doStuff(_dictionary_: TC<T>, t: T): Unit defined in test.TC.Companion
Resulting descriptor: fun <T> doStuff(_dictionary_: TC<T>, t: T): Unit defined in test.TC.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = TC {Companion}
Extension receiver = NO_RECEIVER

Value arguments mapping:

SUCCESS  t : T = t

Resolved value arguments mapping:

SUCCESS  _dictionary_ : TC<T> = _dictionary_0
SUCCESS  t : T = t


Resolved call:

Candidate descriptor: fun <T, C : TC<T>> doStuff(_dictionary_0: TC<T>, t: T): Unit defined in test
Resulting descriptor: fun <T, C : TC<Double>> doStuff(_dictionary_0: TC<Double>, t: Double): Unit defined in test

Explicit receiver kind = NO_EXPLICIT_RECEIVER
Dispatch receiver = NO_RECEIVER
Extension receiver = NO_RECEIVER

Value arguments mapping:

SUCCESS  t : Double = d

Resolved value arguments mapping:

SUCCESS  _dictionary_0 : TC<Double> = test.TCMember
SUCCESS  t : Double = d
