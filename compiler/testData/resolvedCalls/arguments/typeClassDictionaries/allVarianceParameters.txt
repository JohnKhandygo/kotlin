package test

open class A1
open class A2: A1()
open class A3: A2()
open class A4: A3()
open class A5: A4()

@TypeClass
interface TC<in T1, out T2, T3> {
    fun doStuff() {}
}

object HighestMember : TC<A1, A1, A1>

object MiddleMember: TC<A2, A3, A4>

object LowestMember : TC<A5, A5, A5>

fun main() {
    TC.<caret>doStuff<A1, A1, A1>()
    TC.<caret>doStuff<A3, A2, A4>()
    TC.<caret>doStuff<A5, A5, A5>()
}


Resolved call:

Candidate descriptor: fun <in T1, out T2, T3> doStuff(_dictionary_: TC<T1, T2, T3>): Unit defined in test.TC.Companion
Resulting descriptor: fun <in T1, out T2, T3> doStuff(_dictionary_: TC<A1, A1, A1>): Unit defined in test.TC.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = TC {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Resolved value arguments mapping:

SUCCESS  _dictionary_ : TC<A1, A1, A1> = test.HighestMember


Resolved call:

Candidate descriptor: fun <in T1, out T2, T3> doStuff(_dictionary_: TC<T1, T2, T3>): Unit defined in test.TC.Companion
Resulting descriptor: fun <in T1, out T2, T3> doStuff(_dictionary_: TC<A3, A2, A4>): Unit defined in test.TC.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = TC {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Resolved value arguments mapping:

SUCCESS  _dictionary_ : TC<A3, A2, A4> = test.MiddleMember


Resolved call:

Candidate descriptor: fun <in T1, out T2, T3> doStuff(_dictionary_: TC<T1, T2, T3>): Unit defined in test.TC.Companion
Resulting descriptor: fun <in T1, out T2, T3> doStuff(_dictionary_: TC<A5, A5, A5>): Unit defined in test.TC.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = TC {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Resolved value arguments mapping:

SUCCESS  _dictionary_ : TC<A5, A5, A5> = test.LowestMember
