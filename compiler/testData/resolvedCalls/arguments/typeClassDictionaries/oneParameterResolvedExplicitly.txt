package test

@Target(AnnotationTarget.CLASS)
annotation class TypeClass

@Target(AnnotationTarget.CLASS)
annotation class TypeClassMember

@TypeClass
interface TC<T> {
    fun doStuff(t: T)
}

@TypeClassMember
object TCMember : TC<Double> {
    override fun doStuff(t: Double) {}
}

fun <T> doStuff(dictionary: TC<T>, t: T) = dictionary.doStuff(t)

fun main() {
    val d: Double = 0.0
    <caret>doStuff(d)
}


Resolved call:

Candidate descriptor: fun <T> doStuff(dictionary: TC<T>, t: T): Unit defined in test
Resulting descriptor: fun <T> doStuff(dictionary: TC<Double>, t: Double): Unit defined in test

Explicit receiver kind = NO_EXPLICIT_RECEIVER
Dispatch receiver = NO_RECEIVER
Extension receiver = NO_RECEIVER

Value arguments mapping:

SUCCESS  t : Double = d

Resolved value arguments mapping:

SUCCESS  dictionary : TC<Double> = test.TCMember
SUCCESS  t : Double = d
