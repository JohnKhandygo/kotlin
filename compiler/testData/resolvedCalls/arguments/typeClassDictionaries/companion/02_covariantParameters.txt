package test

interface A1
interface A2: A1
interface A3: A2
interface A4: A3
interface A5: A4

open class B1
open class B2: B1()
open class B3: B2(), A3
open class B4: B3()
class B5: B4()

@TypeClass
interface C<out T1, out T2, out T3> {
    fun test(t1: T1, t2: T2, t3: T3) {}
}

object M1 : C<A1, B1, B5>
object M2 : C<A4, B3, A2>
object M3 : C<B3, B4, A5>

fun test1(b1: B1, b5: B5, a2: A2)  = C.<caret>test<B1, B5, A2> (b1, b5, a2) //nothing found
fun test2(a1: A1?, a3: A3, a5: A5) = C.<caret>test<A1?, A3, A5>(a1, a3, a5) //found M3
fun test3(b2: B2, b3: B3, a4: A4?) = C.<caret>test(b2, b3, a4) //found  M3
fun test4(a3: A3, b2: B2, a1: A1)  = C.<caret>test(a3, b2, a1) //found  M2
fun test5(a4: A4?, b5: B5, a5: A5) = C.<caret>test<A3, B4, A5>(a4, b5, a5) //found  M3



Resolved call:

Candidate descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<T1, T2, T3>, t1: T1, t2: T2, t3: T3): Unit defined in test.C.Companion
Resulting descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<B1, B5, A2>, t1: B1, t2: B5, t3: A2): Unit defined in test.C.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = C {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Value arguments mapping:

SUCCESS  t1 : B1 = b1
SUCCESS  t2 : B5 = b5
SUCCESS  t3 : A2 = a2

Resolved value arguments mapping:

IMPLICIT_UNINFERRED_ARGUMENT  _dictionary_ : C<B1, B5, A2> = null
SUCCESS  t1 : B1 = b1
SUCCESS  t2 : B5 = b5
SUCCESS  t3 : A2 = a2


Resolved call:

Candidate descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<T1, T2, T3>, t1: T1, t2: T2, t3: T3): Unit defined in test.C.Companion
Resulting descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<A1?, A3, A5>, t1: A1?, t2: A3, t3: A5): Unit defined in test.C.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = C {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Value arguments mapping:

SUCCESS  t1 : A1? = a1
SUCCESS  t2 : A3 = a3
SUCCESS  t3 : A5 = a5

Resolved value arguments mapping:

SUCCESS  _dictionary_ : C<A1?, A3, A5> = test.M3
SUCCESS  t1 : A1? = a1
SUCCESS  t2 : A3 = a3
SUCCESS  t3 : A5 = a5


Resolved call:

Candidate descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<T1, T2, T3>, t1: T1, t2: T2, t3: T3): Unit defined in test.C.Companion
Resulting descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<B2, B3, A4?>, t1: B2, t2: B3, t3: A4?): Unit defined in test.C.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = C {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Value arguments mapping:

SUCCESS  t1 : B2 = b2
SUCCESS  t2 : B3 = b3
SUCCESS  t3 : A4? = a4

Resolved value arguments mapping:

SUCCESS  _dictionary_ : C<B2, B3, A4?> = test.M3
SUCCESS  t1 : B2 = b2
SUCCESS  t2 : B3 = b3
SUCCESS  t3 : A4? = a4


Resolved call:

Candidate descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<T1, T2, T3>, t1: T1, t2: T2, t3: T3): Unit defined in test.C.Companion
Resulting descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<A3, B2, A1>, t1: A3, t2: B2, t3: A1): Unit defined in test.C.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = C {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Value arguments mapping:

SUCCESS  t1 : A3 = a3
SUCCESS  t2 : B2 = b2
SUCCESS  t3 : A1 = a1

Resolved value arguments mapping:

SUCCESS  _dictionary_ : C<A3, B2, A1> = test.M2
SUCCESS  t1 : A3 = a3
SUCCESS  t2 : B2 = b2
SUCCESS  t3 : A1 = a1


Resolved call:

Candidate descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<T1, T2, T3>, t1: T1, t2: T2, t3: T3): Unit defined in test.C.Companion
Resulting descriptor: fun <out T1, out T2, out T3> test(_dictionary_: C<A3, B4, A5>, t1: A3, t2: B4, t3: A5): Unit defined in test.C.Companion

Explicit receiver kind = DISPATCH_RECEIVER
Dispatch receiver = C {Synthetic Constructor}
Extension receiver = NO_RECEIVER

Value arguments mapping:

TYPE_MISMATCH  t1 : A3 = a4
SUCCESS  t2 : B4 = b5
SUCCESS  t3 : A5 = a5

Resolved value arguments mapping:

SUCCESS  _dictionary_ : C<A3, B4, A5> = test.M3
TYPE_MISMATCH  t1 : A3 = a4
SUCCESS  t2 : B4 = b5
SUCCESS  t3 : A5 = a5
